/*DROP OLD TABLES AND FUNCTIONS*/
DROP TABLE IF EXISTS isPartOf;
DROP TABLE IF EXISTS PRODUCTS;
DROP TABLE IF EXISTS BOARDS;
DROP TABLE IF EXISTS USERS;
DROP TABLE IF EXISTS CATEGORY;

/* Update Timestamp taken from:
http://www.postgresql.org/message-id/1360706442.33888.YahooMailNeo@web162906.mail.bf1.yahoo.com*/

/*ENTITY TABLES BEGIN*/

CREATE TABLE CATEGORY (
ID SERIAL PRIMARY KEY,
Name varchar(30) NOT NULL
);

CREATE TABLE USERS (
ID SERIAL PRIMARY KEY,
Name varchar(30) NOT NULL,
PwHash varchar(50) NOT NULL,
Role varchar(7) DEFAULT 'normal'
);

CREATE TABLE BOARDS (
ID SERIAL PRIMARY KEY,
Name varchar(30) NOT NULL,
Updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
OwnerID INTEGER REFERENCES USERS(ID) ON UPDATE CASCADE ON DELETE CASCADE,
CatID INTEGER REFERENCES CATEGORY(ID) ON UPDATE CASCADE ON DELETE SET NULL
);

CREATE TABLE PRODUCTS (
ID SERIAL PRIMARY KEY,
Name varchar(30) NOT NULL,
Price FLOAT NOT NULL,
Picture varchar(30) DEFAULT 'noPicture',
Source varchar(100) NOT NULL,
Lat FLOAT,
Long FLOAT,
Updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
OwnerID INTEGER REFERENCES USERS(ID) ON UPDATE CASCADE ON DELETE SET NULL,
CatID INTEGER REFERENCES CATEGORY(ID) ON UPDATE CASCADE ON DELETE SET NULL
);

/*ENTITY TABLES END*/
/*RELATION TABLES BEGIN*/

CREATE TABLE isPartOf (
OwnerID INTEGER REFERENCES USERS(ID) ON UPDATE CASCADE ON DELETE CASCADE,
BoardID INTEGER REFERENCES BOARDS(ID) ON UPDATE CASCADE ON DELETE CASCADE
);

/*REALTION TABLES END*/
/*FUNCTIONS BEGIN*/
CREATE OR REPLACE FUNCTION set_updated_timestamp()
  RETURNS TRIGGER
  LANGUAGE plpgsql
AS $$
BEGIN
  NEW.Updated := now();
  RETURN NEW;
END;
$$;

/*FUNCTIONS END*/
/*TRIGGERS BEGIN*/

CREATE TRIGGER boards_update_timestamp
  BEFORE UPDATE ON BOARDS
  FOR EACH ROW EXECUTE PROCEDURE set_updated_timestamp();

CREATE TRIGGER products_update_timestamp
  BEFORE UPDATE ON PRODUCTS
  FOR EACH ROW EXECUTE PROCEDURE set_updated_timestamp();

/*TRIGGERS END*/
